#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('objtest:server');
var http = require('http');



/**
 * Get port from environment and store in Express.
 */

 //生成项目端口号， process.env.PORT 抓取环境变量
var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * 创建http 原生web服务器
 */

var server = http.createServer(app);//createSserver(函数|express|koa实例)




/**
 * 监听
 */

server.listen(port);//监听端口
server.on('error', onError);//监听错误
server.on('listening', onListening);//监听其他

const SOCKETIO = require('socket.io');//创建socket实例
const io = SOCKETIO.listen(server);//监听http实例，未来3000端口下的http请求，会触发socket



//实现聊天室
require('../sockets/bbs')(io);//socket监听

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * 访问了不存在的地址，处理错误
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + '端口被占用了');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * 捕获一些其他相应事件，交由debug第三方模块来处理
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


module.exports = io;//写在最后